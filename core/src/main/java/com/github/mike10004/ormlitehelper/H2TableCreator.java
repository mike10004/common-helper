/*
 * Permission to use, copy, modify, and/or distribute this software for any 
 * purpose with or without fee is hereby granted, provided that this 
 * permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * The author may be contacted via http://ormlite.com/
 */
package com.github.mike10004.ormlitehelper;

import com.j256.ormlite.dao.BaseDaoImpl;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.db.DatabaseType;
import com.j256.ormlite.field.FieldType;
import com.j256.ormlite.logger.Logger;
import com.j256.ormlite.logger.LoggerFactory;
import com.j256.ormlite.misc.SqlExceptionUtil;
import com.j256.ormlite.stmt.StatementBuilder;
import com.j256.ormlite.support.CompiledStatement;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.support.DatabaseConnection;
import com.j256.ormlite.support.DatabaseResults;
import com.j256.ormlite.table.TableInfo;
import com.j256.ormlite.table.TableUtils;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Class that facilitates creation of tables in H2 databases. This class
 * strips some clauses from CREATE TABLE statements generated by 
 * {@link BaseDaoImpl} that are illegal in H2. Portions of this code are
 * from {@link TableUtils} and fall under the ORMLite license.
 * @author graywatson
 * @author mchaberski
 */
public class H2TableCreator {
    
    private static final Logger logger = LoggerFactory.getLogger(H2TableCreator.class);
    private static final FieldType[] noFieldTypes = new FieldType[0];
    
    public <T, ID> int createTable(ConnectionSource connectionSource, Class<T> dataClass, boolean ifNotExists)
            throws SQLException {
        Dao<T, ID> dao = DaoManager.createDao(connectionSource, dataClass);
        if (dao instanceof BaseDaoImpl<?, ?>) {
            return doCreateTable(connectionSource, ((BaseDaoImpl<?, ?>) dao).getTableInfo(), ifNotExists);
        } else {
            TableInfo<T, ID> tableInfo = new TableInfo<>(connectionSource, null, dataClass);
            return doCreateTable(connectionSource, tableInfo, ifNotExists);
        }
    }

    protected int doCreateTestQueries(DatabaseConnection connection, DatabaseType databaseType,
            List<String> queriesAfter) throws SQLException {
        int stmtC = 0;
        // now execute any test queries which test the newly created table
        for (String query : queriesAfter) {
            CompiledStatement compiledStmt = null;
            try {
                compiledStmt
                        = connection.compileStatement(query, StatementBuilder.StatementType.SELECT, noFieldTypes,
                                DatabaseConnection.DEFAULT_RESULT_FLAGS);
                // we don't care about an object cache here
                DatabaseResults results = compiledStmt.runQuery(null);
                int rowC = 0;
                // count the results
                for (boolean isThereMore = results.first(); isThereMore; isThereMore = results.next()) {
                    rowC++;
                }
                logger.info("executing create table after-query got {} results: {}", rowC, query);
            } catch (SQLException e) {
                // we do this to make sure that the statement is in the exception
                throw SqlExceptionUtil.create("executing create table after-query failed: " + query, e);
            } finally {
                // result set is closed by the statement being closed
                if (compiledStmt != null) {
                    compiledStmt.close();
                }
            }
            stmtC++;
        }
        return stmtC;
    }

    protected <T, ID> int doCreateTable(ConnectionSource connectionSource, TableInfo<T, ID> tableInfo,
            boolean ifNotExists) throws SQLException {
        DatabaseType databaseType = connectionSource.getDatabaseType();
        logger.info("creating table '{}'", tableInfo.getTableName());
        List<String> statements = new ArrayList<>();
        List<String> queriesAfter = new ArrayList<>();
        addCreateTableStatements(databaseType, tableInfo, statements, queriesAfter, ifNotExists);
        DatabaseConnection connection = connectionSource.getReadWriteConnection();
        try {
            int stmtC
                    = doStatements(connection, "create", statements, false, databaseType.isCreateTableReturnsNegative(),
                            databaseType.isCreateTableReturnsZero());
            stmtC += doCreateTestQueries(connection, databaseType, queriesAfter);
            return stmtC;
        } finally {
            connectionSource.releaseConnection(connection);
        }
    }

    protected int doStatements(DatabaseConnection connection, String label, Collection<String> statements,
            boolean ignoreErrors, boolean returnsNegative, boolean expectingZero) throws SQLException {
        int stmtC = 0;
        for (String statement : statements) {
            int rowC = 0;
            CompiledStatement compiledStmt = null;
            try {
                compiledStmt
                        = connection.compileStatement(statement, StatementBuilder.StatementType.EXECUTE, noFieldTypes,
                                DatabaseConnection.DEFAULT_RESULT_FLAGS);
                rowC = compiledStmt.runExecute();
                logger.info("executed {} table statement changed {} rows: {}", label, rowC, statement);
            } catch (SQLException e) {
                if (ignoreErrors) {
                    logger.info("ignoring {} error '{}' for statement: {}", label, e, statement);
                } else {
                    throw SqlExceptionUtil.create("SQL statement failed: " + statement, e);
                }
            } finally {
                if (compiledStmt != null) {
                    compiledStmt.close();
                }
            }
            // sanity check
            if (rowC < 0) {
                if (!returnsNegative) {
                    throw new SQLException("SQL statement " + statement + " updated " + rowC
                            + " rows, we were expecting >= 0");
                }
            } else if (rowC > 0 && expectingZero) {
                throw new SQLException("SQL statement updated " + rowC + " rows, we were expecting == 0: " + statement);
            }
            stmtC++;
        }
        return stmtC;
    }

    /**
     * Generate and return the list of statements to create a database table and
     * any associated features.
     *
     * @param <T> entity type
     * @param <ID> the primary key type
     * @param databaseType database type
     * @param tableInfo the table info
     * @param statements statements to be added
     * @param queriesAfter queries to run after
     * @param ifNotExists true if {@code IF NOT EXISTS} clause should be
     * inserted
     * @throws java.sql.SQLException
     */
    protected <T, ID> void addCreateTableStatements(DatabaseType databaseType, TableInfo<T, ID> tableInfo,
            List<String> statements, List<String> queriesAfter, boolean ifNotExists) throws SQLException {
        StringBuilder sb = new StringBuilder(256);
        sb.append("CREATE TABLE ");
        if (ifNotExists && databaseType.isCreateIfNotExistsSupported()) {
            sb.append("IF NOT EXISTS ");
        }
        databaseType.appendEscapedEntityName(sb, tableInfo.getTableName());
        sb.append(" (");
        List<String> additionalArgs = new ArrayList<>();
        List<String> statementsBefore = new ArrayList<>();
        List<String> statementsAfter = new ArrayList<>();
        // our statement will be set here later
        boolean first = true;
        for (FieldType fieldType : tableInfo.getFieldTypes()) {
            // skip foreign collections
            if (fieldType.isForeignCollection()) {
                continue;
            } else if (first) {
                first = false;
            } else {
                sb.append(", ");
            }
            String columnDefinition = fieldType.getColumnDefinition();
            if (columnDefinition == null) {
                // we have to call back to the database type for the specific create syntax
                databaseType.appendColumnArg(tableInfo.getTableName(), sb, fieldType, additionalArgs, statementsBefore,
                        statementsAfter, queriesAfter);
            } else {
                // hand defined field
                databaseType.appendEscapedEntityName(sb, fieldType.getColumnName());
                columnDefinition = stripIllegalColumnDefinitionClauses(columnDefinition);
                sb.append(' ').append(columnDefinition).append(' ');
            }
        }
        // add any sql that sets any primary key fields
        databaseType.addPrimaryKeySql(tableInfo.getFieldTypes(), additionalArgs, statementsBefore, statementsAfter,
                queriesAfter);
        // add any sql that sets any unique fields
        databaseType.addUniqueComboSql(tableInfo.getFieldTypes(), additionalArgs, statementsBefore, statementsAfter,
                queriesAfter);
        for (String arg : additionalArgs) {
            // we will have spat out one argument already so we don't have to do the first dance
            sb.append(", ").append(arg);
        }
        sb.append(") ");
        databaseType.appendCreateTableSuffix(sb);
        statements.addAll(statementsBefore);
        statements.add(sb.toString());
        statements.addAll(statementsAfter);
        addCreateIndexStatements(databaseType, tableInfo, statements, ifNotExists, false);
        addCreateIndexStatements(databaseType, tableInfo, statements, ifNotExists, true);
    }

    protected <T, ID> void addCreateIndexStatements(DatabaseType databaseType, TableInfo<T, ID> tableInfo,
            List<String> statements, boolean ifNotExists, boolean unique) {
        // run through and look for index annotations
        Map<String, List<String>> indexMap = new HashMap<>();
        for (FieldType fieldType : tableInfo.getFieldTypes()) {
            String indexName;
            if (unique) {
                indexName = fieldType.getUniqueIndexName();
            } else {
                indexName = fieldType.getIndexName();
            }
            if (indexName == null) {
                continue;
            }

            List<String> columnList = indexMap.get(indexName);
            if (columnList == null) {
                columnList = new ArrayList<>();
                indexMap.put(indexName, columnList);
            }
            columnList.add(fieldType.getColumnName());
        }

        StringBuilder sb = new StringBuilder(128);
        for (Map.Entry<String, List<String>> indexEntry : indexMap.entrySet()) {
            logger.info("creating index '{}' for table '{}", indexEntry.getKey(), tableInfo.getTableName());
            sb.append("CREATE ");
            if (unique) {
                sb.append("UNIQUE ");
            }
            sb.append("INDEX ");
            if (ifNotExists && databaseType.isCreateIndexIfNotExistsSupported()) {
                sb.append("IF NOT EXISTS ");
            }
            databaseType.appendEscapedEntityName(sb, indexEntry.getKey());
            sb.append(" ON ");
            databaseType.appendEscapedEntityName(sb, tableInfo.getTableName());
            sb.append(" ( ");
            boolean first = true;
            for (String columnName : indexEntry.getValue()) {
                if (first) {
                    first = false;
                } else {
                    sb.append(", ");
                }
                databaseType.appendEscapedEntityName(sb, columnName);
            }
            sb.append(" )");
            statements.add(sb.toString());
            sb.setLength(0);
        }
    }

    static final String character_set_regex = "\\bCHARACTER\\s+SET\\s+\\S+ ?";
    
    /**
     * Strips column definition clauses that are illegal in H2. This is hacky,
     * but it would be less hacky if ORMLite would provide some way to 
     * override table creation statements for particular database types.
     * Anyway, H2 databases are only used in development and testing,
     * so this hacky code path is never visited in production.
     * 
     * @param columnDefinition the column definition
     * @return the cleansed column definition
     */
    protected String stripIllegalColumnDefinitionClauses(String columnDefinition) {
        columnDefinition = columnDefinition.replaceAll(character_set_regex, " ");
        return columnDefinition;
    }

}
